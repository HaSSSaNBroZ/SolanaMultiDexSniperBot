version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sniper-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: sniper_bot
      POSTGRES_USER: sniper_user
      POSTGRES_PASSWORD: sniper_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    networks:
      - sniper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sniper_user -d sniper_bot"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sniper-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass sniper_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - sniper-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: sniper-prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - sniper-network
    depends_on:
      - postgres
      - redis

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sniper-grafana-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: sniper_grafana_password
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - sniper-network
    depends_on:
      - prometheus

  # Jaeger Tracing (Optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: sniper-jaeger-dev
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Accept jaeger.thrift via HTTP
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - sniper-network

  # Development Tools Container
  dev-tools:
    image: postgres:15-alpine
    container_name: sniper-dev-tools
    volumes:
      - .:/workspace:ro
      - postgres_data:/postgres_backup
    networks:
      - sniper-network
    depends_on:
      - postgres
      - redis
    profiles:
      - tools
    entrypoint: tail -f /dev/null

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sniper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16