version: '3.8'

services:
  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    container_name: sniper-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sniper_bot}
      POSTGRES_USER: ${POSTGRES_USER:-sniper_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backups:/backups
      - ./monitoring/postgres-exporter.sql:/docker-entrypoint-initdb.d/postgres-exporter.sql:ro
    networks:
      - sniper-network-prod
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-sniper_user} -d ${POSTGRES_DB:-sniper_bot}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # Redis Cache - Production Configuration
  redis:
    image: redis:7-alpine
    container_name: sniper-redis-prod
    restart: always
    command: |
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data_prod:/data
      - ./redis/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - sniper-network-prod
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Prometheus - Production Configuration
  prometheus:
    image: prom/prometheus:latest
    container_name: sniper-prometheus-prod
    restart: always
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - sniper-network-prod
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Redis Exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: sniper-redis-exporter-prod
    restart: always
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - "127.0.0.1:9121:9121"
    networks:
      - sniper-network-prod
    depends_on:
      redis:
        condition: service_healthy

  # Postgres Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: sniper-postgres-exporter-prod
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-sniper_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-sniper_bot}?sslmode=disable"
    ports:
      - "127.0.0.1:9187:9187"
    networks:
      - sniper-network-prod
    depends_on:
      postgres:
        condition: service_healthy

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: sniper-backup-prod
    restart: "no"
    environment:
      PGUSER: ${POSTGRES_USER:-sniper_user}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB:-sniper_bot}
      PGHOST: postgres
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - sniper-network-prod
    profiles:
      - backup
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["/backup.sh"]

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sniper-bot/data/postgres
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sniper-bot/data/redis
  prometheus_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sniper-bot/data/prometheus

networks:
  sniper-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16